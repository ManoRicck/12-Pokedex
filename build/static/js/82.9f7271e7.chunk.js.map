{"version":3,"file":"static/js/82.9f7271e7.chunk.js","mappings":"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","sources":["app/reducers/addPokemonToList.ts","components/PokemonCardGrid.tsx","components/Login.tsx","pages/MyList.tsx","sections/Wrapper.tsx"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { addDoc } from \"firebase/firestore\";\nimport { pokemonListRef } from \"../../utils/firebaseConfig\";\nimport { getUserPokemons } from \"./getUserPokemons\";\nimport { setToast } from \"../slices/AppSlice\";\nimport {\n  pokemonStatsType,\n  pokemonTypeInterface,\n  userPokemonsType,\n} from \"../../utils/types\";\nimport { RootState } from \"../store\";\n\nexport const addPokemonToList = createAsyncThunk(\n  \"pokemon/addPkemon\",\n  async (\n    pokemon: {\n      id: number;\n      name: string;\n      types: pokemonTypeInterface[] | string[];\n      stats?: pokemonStatsType[];\n    },\n    { getState, dispatch }\n  ) => {\n    try {\n      const {\n        app: { userInfo },\n        pokemon: { userPokemons },\n      } = getState() as RootState;\n      if (!userInfo?.email) {\n        return dispatch(\n          setToast(\"Faça login para adicionar Pokémon à sua coleção.\")\n        );\n      }\n      const index = userPokemons.findIndex((userPokemon: userPokemonsType) => {\n        return userPokemon.name === pokemon.name;\n      });\n      if (index === -1) {\n        let types: string[] = [];\n        if (!pokemon.stats) {\n          pokemon.types.forEach((type: any) =>\n            types.push(Object.keys(type).toString())\n          );\n        } else {\n          types = pokemon.types as string[];\n        }\n        await addDoc(pokemonListRef, {\n          pokemon: { id: pokemon.id, name: pokemon.name, types },\n          email: userInfo.email,\n        });\n        await dispatch(getUserPokemons());\n        dispatch(setToast(`${pokemon.name} adicionado à sua coleção.`));\n      } else {\n        dispatch(setToast(`${pokemon.name} já faz parte da sua coleção.`));\n      }\n    } catch (err) {\n      console.log({ err });\n    }\n  }\n);\n","import React from \"react\";\nimport { IoGitCompare } from \"react-icons/io5\";\nimport { FaTrash, FaPlus } from \"react-icons/fa\";\nimport { addToCompare, setCurrentPokemon } from \"../app/slices/PokemonSlice\";\nimport { useAppDispatch } from \"../app/hooks\";\nimport { removePokemonFromUserList } from \"../app/reducers/removePokemonFromUserList\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { setPokemonTab, setToast } from \"../app/slices/AppSlice\";\nimport { addPokemonToList } from \"../app/reducers/addPokemonToList\";\nimport { pokemonTabs } from \"../utils/constants\";\nimport { pokemonTypeInterface, userPokemonsType } from \"../utils/types\";\nfunction PokemonCardGrid({ pokemons }: { pokemons: userPokemonsType[] }) {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n  return (\n    <div className=\"pokemon-card-grid-container\">\n      <div className=\"pokemon-card-grid\">\n        {pokemons &&\n          pokemons.length > 0 &&\n          pokemons?.map((data: userPokemonsType) => {\n            return (\n              <div key={data.id} className=\"pokemon-card\">\n                <div className=\"pokemon-card-list\">\n                  {location.pathname.includes(\"/pokemon\") ? (\n                    <FaPlus\n                      className=\"plus\"\n                      onClick={() => dispatch(addPokemonToList(data))}\n                    />\n                  ) : location.pathname.includes(\"/search\") ? (\n                    <FaPlus\n                      className=\"plus\"\n                      onClick={() => dispatch(addPokemonToList(data))}\n                    />\n                  ) : (\n                    <FaTrash\n                      className=\"trash\"\n                      onClick={async () => {\n                        await dispatch(\n                          removePokemonFromUserList({ id: data.firebaseId! })\n                        );\n                        dispatch(setToast(\"Pokémon removido com sucesso.\"));\n                      }}\n                    />\n                  )}\n                </div>\n                <div className=\"pokemon-card-compare\">\n                  <IoGitCompare\n                    onClick={() => {\n                      dispatch(addToCompare(data));\n                      dispatch(\n                        setToast(\n                          `${data.name} foi adicionado à fila de comparação.`\n                        )\n                      );\n                    }}\n                  />\n                </div>\n                <h3 className=\"pokemon-card-title\">{data.name}</h3>\n                <img\n                  src={data.image}\n                  alt=\"\"\n                  className=\"pokemon-card-image\"\n                  loading=\"lazy\"\n                  onClick={() => {\n                    dispatch(setPokemonTab(pokemonTabs.description));\n                    dispatch(setCurrentPokemon(undefined));\n                    navigate(`/pokemon/${data.id}`);\n                  }}\n                />\n                <div className=\"pokemon-card-types\">\n                  {data.types.map(\n                    (type: pokemonTypeInterface, index: number) => {\n                      const keys = Object.keys(type);\n                      return (\n                        <div className=\"pokemon-card-types-type\" key={index}>\n                          <img\n                            src={type[keys[0]].image}\n                            alt=\"pokemon type\"\n                            className=\"pokemon-card-types-type-image\"\n                            loading=\"lazy\"\n                          />\n                          <h6 className=\"pokemon-card-types-type-text\">\n                            {keys[0]}\n                          </h6>\n                        </div>\n                      );\n                    }\n                  )}\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default PokemonCardGrid;","import { useAppDispatch } from \"../app/hooks\";\nimport { GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport { firebaseAuth, firebaseDB, usersRef } from \"../utils/firebaseConfig\";\nimport { FcGoogle } from \"react-icons/fc\";\nimport { addDoc, collection, getDocs, query, where } from \"firebase/firestore\";\nimport { setUserStatus } from \"../app/slices/AppSlice\";\nfunction Login() {\n  const dispatch = useAppDispatch();\n\n  const handleLogin = async () => {\n    const provider = new GoogleAuthProvider();\n    const {\n      user: { email, uid },\n    } = await signInWithPopup(firebaseAuth, provider);\n\n    if (email) {\n      const firestoreQuery = query(usersRef, where(\"uid\", \"==\", uid));\n      const fetchedUser = await getDocs(firestoreQuery);\n      if (fetchedUser.docs.length === 0) {\n        await addDoc(collection(firebaseDB, \"users\"), {\n          uid,\n          email,\n        });\n      }\n      dispatch(setUserStatus({ email }));\n    }\n  };\n\n  return (\n    <div className=\"login\">\n      <button onClick={handleLogin} className=\"login-btn\">\n        <FcGoogle /> Faça login com o Google\n      </button>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useEffect } from \"react\";\nimport Wrapper from \"../sections/Wrapper\";\nimport Login from \"../components/Login\";\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\nimport { getUserPokemons } from \"../app/reducers/getUserPokemons\";\nimport PokemonCardGrid from \"../components/PokemonCardGrid\";\n\nfunction MyList() {\n  const { userInfo } = useAppSelector(({ app }) => app);\n  const { userPokemons } = useAppSelector(({ pokemon }) => pokemon);\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(getUserPokemons());\n  }, [userInfo, dispatch]);\n  return (\n    <div className=\"list\">\n      {userInfo ? <PokemonCardGrid pokemons={userPokemons} /> : <Login />}\n    </div>\n  );\n}\n\nexport default Wrapper(MyList);\n","import React from \"react\";\n\nconst Wrapper = (Component: React.FC) => () => {\n  return (\n    <div className=\"content\">\n      <Component />\n    </div>\n  );\n};\n\nexport default Wrapper;\n"],"names":["addPokemonToList","createAsyncThunk","pokemon","getState","dispatch","userInfo","app","userPokemons","email","setToast","findIndex","userPokemon","name","types","stats","forEach","type","push","Object","keys","toString","addDoc","pokemonListRef","id","getUserPokemons","console","log","err","pokemons","useAppDispatch","navigate","useNavigate","location","useLocation","className","length","map","data","pathname","includes","onClick","removePokemonFromUserList","firebaseId","addToCompare","src","image","alt","loading","setPokemonTab","pokemonTabs","setCurrentPokemon","undefined","index","handleLogin","provider","GoogleAuthProvider","signInWithPopup","firebaseAuth","user","uid","firestoreQuery","query","usersRef","where","getDocs","docs","collection","firebaseDB","setUserStatus","Wrapper","useAppSelector","useEffect","PokemonCardGrid","Component"],"sourceRoot":""}