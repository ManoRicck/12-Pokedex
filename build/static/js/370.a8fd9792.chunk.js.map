{"version":3,"file":"static/js/370.a8fd9792.chunk.js","mappings":"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","sources":["app/reducers/addPokemonToList.ts","components/PokemonCardGrid.tsx","pages/Search.tsx","sections/Wrapper.tsx"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { addDoc } from \"firebase/firestore\";\nimport { pokemonListRef } from \"../../utils/firebaseConfig\";\nimport { getUserPokemons } from \"./getUserPokemons\";\nimport { setToast } from \"../slices/AppSlice\";\nimport {\n  pokemonStatsType,\n  pokemonTypeInterface,\n  userPokemonsType,\n} from \"../../utils/types\";\nimport { RootState } from \"../store\";\n\nexport const addPokemonToList = createAsyncThunk(\n  \"pokemon/addPkemon\",\n  async (\n    pokemon: {\n      id: number;\n      name: string;\n      types: pokemonTypeInterface[] | string[];\n      stats?: pokemonStatsType[];\n    },\n    { getState, dispatch }\n  ) => {\n    try {\n      const {\n        app: { userInfo },\n        pokemon: { userPokemons },\n      } = getState() as RootState;\n      if (!userInfo?.email) {\n        return dispatch(\n          setToast(\"Faça login para adicionar Pokémon à sua coleção.\")\n        );\n      }\n      const index = userPokemons.findIndex((userPokemon: userPokemonsType) => {\n        return userPokemon.name === pokemon.name;\n      });\n      if (index === -1) {\n        let types: string[] = [];\n        if (!pokemon.stats) {\n          pokemon.types.forEach((type: any) =>\n            types.push(Object.keys(type).toString())\n          );\n        } else {\n          types = pokemon.types as string[];\n        }\n        await addDoc(pokemonListRef, {\n          pokemon: { id: pokemon.id, name: pokemon.name, types },\n          email: userInfo.email,\n        });\n        await dispatch(getUserPokemons());\n        dispatch(setToast(`${pokemon.name} adicionado à sua coleção.`));\n      } else {\n        dispatch(setToast(`${pokemon.name} já faz parte da sua coleção.`));\n      }\n    } catch (err) {\n      console.log({ err });\n    }\n  }\n);\n","import React from \"react\";\nimport { IoGitCompare } from \"react-icons/io5\";\nimport { FaTrash, FaPlus } from \"react-icons/fa\";\nimport { addToCompare, setCurrentPokemon } from \"../app/slices/PokemonSlice\";\nimport { useAppDispatch } from \"../app/hooks\";\nimport { removePokemonFromUserList } from \"../app/reducers/removePokemonFromUserList\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { setPokemonTab, setToast } from \"../app/slices/AppSlice\";\nimport { addPokemonToList } from \"../app/reducers/addPokemonToList\";\nimport { pokemonTabs } from \"../utils/constants\";\nimport { pokemonTypeInterface, userPokemonsType } from \"../utils/types\";\nfunction PokemonCardGrid({ pokemons }: { pokemons: userPokemonsType[] }) {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n  return (\n    <div className=\"pokemon-card-grid-container\">\n      <div className=\"pokemon-card-grid\">\n        {pokemons &&\n          pokemons.length > 0 &&\n          pokemons?.map((data: userPokemonsType) => {\n            return (\n              <div key={data.id} className=\"pokemon-card\">\n                <div className=\"pokemon-card-list\">\n                  {location.pathname.includes(\"/pokemon\") ? (\n                    <FaPlus\n                      className=\"plus\"\n                      onClick={() => dispatch(addPokemonToList(data))}\n                    />\n                  ) : location.pathname.includes(\"/search\") ? (\n                    <FaPlus\n                      className=\"plus\"\n                      onClick={() => dispatch(addPokemonToList(data))}\n                    />\n                  ) : (\n                    <FaTrash\n                      className=\"trash\"\n                      onClick={async () => {\n                        await dispatch(\n                          removePokemonFromUserList({ id: data.firebaseId! })\n                        );\n                        dispatch(setToast(\"Pokémon removido com sucesso.\"));\n                      }}\n                    />\n                  )}\n                </div>\n                <div className=\"pokemon-card-compare\">\n                  <IoGitCompare\n                    onClick={() => {\n                      dispatch(addToCompare(data));\n                      dispatch(\n                        setToast(\n                          `${data.name} foi adicionado à fila de comparação.`\n                        )\n                      );\n                    }}\n                  />\n                </div>\n                <h3 className=\"pokemon-card-title\">{data.name}</h3>\n                <img\n                  src={data.image}\n                  alt=\"\"\n                  className=\"pokemon-card-image\"\n                  loading=\"lazy\"\n                  onClick={() => {\n                    dispatch(setPokemonTab(pokemonTabs.description));\n                    dispatch(setCurrentPokemon(undefined));\n                    navigate(`/pokemon/${data.id}`);\n                  }}\n                />\n                <div className=\"pokemon-card-types\">\n                  {data.types.map(\n                    (type: pokemonTypeInterface, index: number) => {\n                      const keys = Object.keys(type);\n                      return (\n                        <div className=\"pokemon-card-types-type\" key={index}>\n                          <img\n                            src={type[keys[0]].image}\n                            alt=\"pokemon type\"\n                            className=\"pokemon-card-types-type-image\"\n                            loading=\"lazy\"\n                          />\n                          <h6 className=\"pokemon-card-types-type-text\">\n                            {keys[0]}\n                          </h6>\n                        </div>\n                      );\n                    }\n                  )}\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default PokemonCardGrid;","// @ts-nocheck\n\nimport React, { useEffect } from \"react\";\nimport Wrapper from \"../sections/Wrapper\";\nimport { debounce } from \"../utils\";\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\nimport { getInitialPokemonData } from \"../app/reducers/getInitialPokemonData\";\nimport { getPokemonsData } from \"../app/reducers/getPokemonsData\";\nimport Loader from \"../components/Loader\";\nimport { setLoading } from \"../app/slices/AppSlice\";\n\nimport PokemonCardGrid from \"../components/PokemonCardGrid\";\n\nfunction Search() {\n  const handleChange = debounce((value: string) => getPokemon(value), 300);\n  const isLoading = useAppSelector(({ app: { isLoading } }) => isLoading);\n\n  const dispatch = useAppDispatch();\n  const { allPokemon, randomPokemons } = useAppSelector(\n    ({ pokemon }) => pokemon\n  );\n\n  useEffect(() => {\n    dispatch(getInitialPokemonData());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (allPokemon) {\n      const clonedPokemons = [...allPokemon];\n      const randomPokemonsId = clonedPokemons\n        .sort(() => Math.random() - Math.random())\n        .slice(0, 20);\n      dispatch(getPokemonsData(randomPokemonsId));\n    }\n  }, [allPokemon, dispatch]);\n\n  useEffect(() => {\n    if (randomPokemons) {\n      dispatch(setLoading(false));\n    }\n  }, [randomPokemons, dispatch]);\n\n  const getPokemon = async (value: string) => {\n    if (value.length) {\n      const pokemons = allPokemon.filter((pokemon) =>\n        pokemon.name.includes(value.toLowerCase())\n      );\n      dispatch(getPokemonsData(pokemons));\n    } else {\n      const clonedPokemons = [...allPokemon];\n      const randomPokemonsId = clonedPokemons\n        .sort(() => Math.random() - Math.random())\n        .slice(0, 20);\n      dispatch(getPokemonsData(randomPokemonsId));\n    }\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            onChange={(e) => handleChange(e.target.value)}\n            className=\"pokemon-searchbar\"\n            placeholder=\"Pesquisar Pokémon\"\n          />\n          <PokemonCardGrid pokemons={randomPokemons} />\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Wrapper(Search);\n","import React from \"react\";\n\nconst Wrapper = (Component: React.FC) => () => {\n  return (\n    <div className=\"content\">\n      <Component />\n    </div>\n  );\n};\n\nexport default Wrapper;\n"],"names":["addPokemonToList","createAsyncThunk","pokemon","getState","dispatch","userInfo","app","userPokemons","email","setToast","findIndex","userPokemon","name","types","stats","forEach","type","push","Object","keys","toString","addDoc","pokemonListRef","id","getUserPokemons","console","log","err","pokemons","useAppDispatch","navigate","useNavigate","location","useLocation","className","length","map","data","pathname","includes","onClick","removePokemonFromUserList","firebaseId","addToCompare","src","image","alt","loading","setPokemonTab","pokemonTabs","setCurrentPokemon","undefined","index","Wrapper","handleChange","debounce","value","getPokemon","isLoading","useAppSelector","allPokemon","randomPokemons","useEffect","getInitialPokemonData","randomPokemonsId","sort","Math","random","slice","getPokemonsData","setLoading","filter","toLowerCase","clonedPokemons","onChange","e","target","placeholder","Component"],"sourceRoot":""}